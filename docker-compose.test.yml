# Docker Compose for CI Testing Environment
version: '3.8'

services:
  # PostgreSQL Test Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tokuteigino_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: --auth-host=trust
    # Use tmpfs for faster testing
    tmpfs:
      - /var/lib/postgresql/data
    command: >
      postgres
      -c shared_buffers=128MB
      -c max_connections=20
      -c log_min_messages=warning
      -c log_min_error_statement=error
      -c fsync=off
      -c synchronous_commit=off
      -c full_page_writes=off
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Redis Test Cache
  redis:
    image: redis:7-alpine
    command: redis-server --save "" --appendonly no --maxmemory 100mb
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # FastAPI Backend for Testing
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tokuteigino_test
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=test-key-mock
      - ENVIRONMENT=test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - test-network

networks:
  test-network:
    driver: bridge