# Docker Compose for Development Environment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tokuteigino-postgres
    environment:
      POSTGRES_DB: tokuteigino
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - tokuteigino-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tokuteigino-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tokuteigino-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Supabase Database
  supabase-db:
    image: supabase/postgres:15.1.1.78
    container_name: tokuteigino-supabase-db
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: 5432
      POSTGRES_PORT: 5432
      PGPASSWORD: postgres
      POSTGRES_PASSWORD: postgres
      PGDATABASE: postgres
      POSTGRES_DB: postgres
      JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      JWT_EXP: 3600
    volumes:
      - supabase_db_data:/var/lib/postgresql/data
      - ./supabase/init:/docker-entrypoint-initdb.d
    ports:
      - "54322:5432"
    networks:
      - tokuteigino-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Supabase Kong API Gateway
  supabase-kong:
    image: kong:2.8.1
    container_name: tokuteigino-supabase-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    ports:
      - "54321:8000"
      - "54323:8443"
    volumes:
      - ./supabase/config/kong.yml:/var/lib/kong/kong.yml:ro
    networks:
      - tokuteigino-network
    depends_on:
      - supabase-auth
      - supabase-rest
      - supabase-realtime
      - supabase-storage

  # Supabase Auth
  supabase-auth:
    image: supabase/gotrue:v2.143.0
    container_name: tokuteigino-supabase-auth
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: http://localhost:54321
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:postgres@supabase-db:5432/postgres
      GOTRUE_SITE_URL: http://localhost:5173
      GOTRUE_URI_ALLOW_LIST: http://localhost:5173,http://localhost:5173/**
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      GOTRUE_EXTERNAL_EMAIL_ENABLED: true
      GOTRUE_MAILER_AUTOCONFIRM: false
      GOTRUE_SMTP_ADMIN_EMAIL: admin@localhost
      GOTRUE_SMTP_HOST: inbucket
      GOTRUE_SMTP_PORT: 2500
      GOTRUE_SMTP_USER: fake_mail_user
      GOTRUE_SMTP_PASS: fake_mail_password
      GOTRUE_MAILER_URLPATHS_INVITE: http://localhost:5173/auth/callback
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: http://localhost:5173/auth/callback
      GOTRUE_MAILER_URLPATHS_RECOVERY: http://localhost:5173/auth/callback
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: http://localhost:5173/auth/callback
    networks:
      - tokuteigino-network
    depends_on:
      supabase-db:
        condition: service_healthy

  # Supabase REST API
  supabase-rest:
    image: postgrest/postgrest:v12.0.1
    container_name: tokuteigino-supabase-rest
    environment:
      PGRST_DB_URI: postgres://authenticator:postgres@supabase-db:5432/postgres
      PGRST_DB_SCHEMAS: public,storage,graphql_public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      PGRST_DB_USE_LEGACY_GUCS: false
      PGRST_APP_SETTINGS_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      PGRST_APP_SETTINGS_JWT_EXP: 3600
    networks:
      - tokuteigino-network
    depends_on:
      supabase-db:
        condition: service_healthy

  # Supabase Realtime
  supabase-realtime:
    image: supabase/realtime:v2.25.50
    container_name: tokuteigino-supabase-realtime
    environment:
      PORT: 4000
      DB_HOST: supabase-db
      DB_PORT: 5432
      DB_USER: supabase_admin
      DB_PASSWORD: postgres
      DB_NAME: postgres
      DB_AFTER_CONNECT_QUERY: SET search_path TO _realtime
      DB_ENC_KEY: supabaserealtime
      API_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      FLY_ALLOC_ID: fly123
      FLY_APP_NAME: realtime
      SECRET_KEY_BASE: UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8en0k56t5qStIwpLb
      ERL_AFLAGS: -proto_dist inet_tcp
      ENABLE_TAILSCALE: false
      DNS_NODES: "''"
    networks:
      - tokuteigino-network
    depends_on:
      supabase-db:
        condition: service_healthy

  # Supabase Storage
  supabase-storage:
    image: supabase/storage-api:v0.46.4
    container_name: tokuteigino-supabase-storage
    environment:
      ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
      SERVICE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
      POSTGREST_URL: http://supabase-rest:3000
      PGRST_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      DATABASE_URL: postgres://supabase_storage_admin:postgres@supabase-db:5432/postgres
      PGOPTIONS: -c search_path=storage,public
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: stub
      GLOBAL_S3_BUCKET: stub
      ENABLE_IMAGE_TRANSFORMATION: true
      IMGPROXY_URL: http://imgproxy:5001
    volumes:
      - supabase_storage_data:/var/lib/storage
    networks:
      - tokuteigino-network
    depends_on:
      supabase-db:
        condition: service_healthy

  # Mail Server for testing (Inbucket)
  inbucket:
    image: inbucket/inbucket:stable
    container_name: tokuteigino-inbucket
    ports:
      - "54324:9000"
      - "54325:2500"
    environment:
      INBUCKET_WEB_ADDR: 0.0.0.0:9000
      INBUCKET_POP3_ADDR: 0.0.0.0:1100
      INBUCKET_SMTP_ADDR: 0.0.0.0:2500
    networks:
      - tokuteigino-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tokuteigino-backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tokuteigino
      - SUPABASE_URL=http://supabase:54321
      - SUPABASE_KEY=${SUPABASE_ANON_KEY}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - tokuteigino-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # React + Vite Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tokuteigino-frontend
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL:-http://localhost:54321}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY:-${SUPABASE_ANON_KEY}}
      - NODE_ENV=development
    ports:
      - "5173:5173"    # Vite dev server
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - tokuteigino-network
    depends_on:
      - backend
    restart: unless-stopped
    tty: true
    stdin_open: true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tokuteigino-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - tokuteigino-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tokuteigino-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - tokuteigino-network
    depends_on:
      - postgres
    restart: unless-stopped


volumes:
  postgres_data:
  supabase_db_data:
  supabase_storage_data:
  redis_data:
  backend_logs:
  nginx_logs:
  pgadmin_data:

networks:
  tokuteigino-network:
    driver: bridge