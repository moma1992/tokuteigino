# Docker Compose for Development Environment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tokuteigino-postgres
    environment:
      POSTGRES_DB: tokuteigino
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - tokuteigino-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tokuteigino-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tokuteigino-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Supabase Local Development
  supabase:
    image: supabase/postgres:15.1.0.117
    container_name: tokuteigino-supabase
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: supabase_admin
      POSTGRES_PASSWORD: supabase_admin
      POSTGRES_PORT: 5432
    ports:
      - "54322:5432"
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./supabase:/docker-entrypoint-initdb.d
    networks:
      - tokuteigino-network
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_min_messages=fatal

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tokuteigino-backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tokuteigino
      - SUPABASE_URL=http://supabase:54321
      - SUPABASE_KEY=${SUPABASE_ANON_KEY}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - tokuteigino-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # React + Vite Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tokuteigino-frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_SUPABASE_URL=http://localhost:54321
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - NODE_ENV=development
    ports:
      - "5173:5173"    # Vite dev server
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - tokuteigino-network
    depends_on:
      - backend
    restart: unless-stopped
    tty: true
    stdin_open: true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tokuteigino-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - tokuteigino-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tokuteigino-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - tokuteigino-network
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
  supabase_data:
  redis_data:
  backend_logs:
  nginx_logs:
  pgadmin_data:

networks:
  tokuteigino-network:
    driver: bridge