# Docker Compose for Testing Environment
version: '3.8'

services:
  # PostgreSQL for testing
  postgres-test:
    image: postgres:15-alpine
    container_name: tokuteigino-postgres-test
    environment:
      POSTGRES_DB: tokuteigino_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ../supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for testing cache
  redis-test:
    image: redis:7-alpine
    container_name: tokuteigino-redis-test
    ports:
      - "6380:6379"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend API tests
  backend-test:
    build:
      context: ../backend
      dockerfile: Dockerfile.test
    container_name: tokuteigino-backend-test
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-test:5432/tokuteigino_test
      - REDIS_URL=redis://redis-test:6379
      - ENVIRONMENT=test
      - OPENAI_API_KEY=${OPENAI_API_KEY:-test-key}
    volumes:
      - ../backend:/app
      - backend_test_coverage:/app/htmlcov
    networks:
      - test-network
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: >
      sh -c "
        poetry run alembic upgrade head &&
        poetry run pytest -v --cov=. --cov-report=html --cov-report=term
      "

  # Frontend tests
  frontend-test:
    build:
      context: ../frontend
      dockerfile: Dockerfile.test
    container_name: tokuteigino-frontend-test
    environment:
      - NODE_ENV=test
      - EXPO_PUBLIC_API_URL=http://backend-test:8000
    volumes:
      - ../frontend:/app
      - frontend_test_coverage:/app/coverage
    networks:
      - test-network
    command: >
      sh -c "
        yarn test --coverage --watchAll=false
      "

  # E2E Testing with Playwright
  e2e-test:
    image: mcr.microsoft.com/playwright:focal
    container_name: tokuteigino-e2e-test
    working_dir: /app
    environment:
      - API_URL=http://backend-test:8000
      - FRONTEND_URL=http://frontend-test:19006
    volumes:
      - ../e2e:/app
      - e2e_test_results:/app/test-results
    networks:
      - test-network
    depends_on:
      - backend-test
      - frontend-test
    command: >
      sh -c "
        npm install &&
        npx playwright test
      "

volumes:
  postgres_test_data:
  backend_test_coverage:
  frontend_test_coverage:
  e2e_test_results:

networks:
  test-network:
    driver: bridge