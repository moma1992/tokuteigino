name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:

  security:
    name: 🔒 Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      continue-on-error: true
      run: |
        if [ -f "pyproject.toml" ]; then
          bandit -r . -f json -o bandit-report.json || bandit -r . --severity-level medium
        else
          bandit -r . --severity-level medium -x tests/
        fi

    - name: Run Safety check
      continue-on-error: true
      run: |
        if [ -f requirements.txt ]; then
          safety check --file requirements.txt
        else
          echo "No requirements.txt found, skipping safety check"
        fi

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
        if-no-files-found: ignore

  quality:
    name: 📏 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort

    - name: Check code formatting with Black
      continue-on-error: true
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      continue-on-error: true
      run: |
        isort --check-only --diff .

    - name: Run Flake8 linting
      continue-on-error: true
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run MyPy type checking
      continue-on-error: true
      run: |
        if [ -f "pyproject.toml" ] || [ -f "mypy.ini" ]; then
          mypy .
        else
          echo "No MyPy configuration found, skipping type checking"
        fi

  frontend-quality:
    name: 🎨 Frontend Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run ESLint
      continue-on-error: true
      working-directory: frontend
      run: npm run lint || echo "Linting completed with warnings"

    - name: Run TypeScript check
      continue-on-error: true
      working-directory: frontend
      run: npm run typecheck || echo "Type checking completed with errors"

    - name: Check build
      working-directory: frontend
      run: npm run build

  docker-health:
    name: 🐳 Docker Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend container
      run: |
        docker build -t tokuteigino-frontend:test ./frontend

    - name: Build backend container
      run: |
        docker build -t tokuteigino-backend:test ./backend

    - name: Create test environment file
      run: |
        cat > .env << EOF
        NODE_ENV=development
        POSTGRES_DB=tokuteigino
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        REDIS_URL=redis://redis:6379
        DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tokuteigino
        SUPABASE_URL=http://supabase:54321
        VITE_API_URL=http://localhost:8000
        VITE_SUPABASE_URL=http://localhost:54321
        OPENAI_API_KEY=test-key-mock
        SUPABASE_ANON_KEY=test-anon-key
        EOF
    
    - name: Test Docker Compose configuration
      run: |
        docker-compose -f docker-compose.yml config

  summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [security, quality, frontend-quality, docker-health]
    if: always()
    
    steps:
    - name: CI Pipeline Summary
      run: |
        echo "🚀 CI Pipeline Execution Complete"
        echo "📋 Job Results:"
        echo "  🔒 Security: ${{ needs.security.result }}"
        echo "  📏 Quality: ${{ needs.quality.result }}"
        echo "  🎨 Frontend Quality: ${{ needs.frontend-quality.result }}"
        echo "  🐳 Docker Health: ${{ needs.docker-health.result }}"
        echo "ℹ️  Tests are executed in separate test.yml workflow"
        
        if [[ "${{ needs.security.result }}" == "success" && "${{ needs.quality.result }}" == "success" && "${{ needs.frontend-quality.result }}" == "success" && "${{ needs.docker-health.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
        else
          echo "⚠️  Some checks completed with warnings - review the logs above"
        fi