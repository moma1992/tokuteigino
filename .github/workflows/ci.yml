name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('backend/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      continue-on-error: true
      working-directory: backend
      run: |
        bandit -r . -f json -o bandit-report.json || bandit -r . --severity-level medium

    - name: Run Safety check on backend
      continue-on-error: true
      working-directory: backend
      run: |
        if [ -f "pyproject.toml" ]; then
          # Use Poetry to export requirements for safety check
          pip install poetry
          poetry export --format=requirements.txt --output=requirements.txt --without-hashes || echo "Poetry export failed, skipping safety check"
          if [ -f "requirements.txt" ]; then
            safety check --file requirements.txt || echo "Safety check completed with warnings"
          fi
        else
          echo "No pyproject.toml found, skipping safety check"
        fi

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
        if-no-files-found: ignore

  quality:
    name: 📏 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: backend/.venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install backend dependencies
      working-directory: backend
      run: poetry install --no-interaction

    - name: Check code formatting with Black
      continue-on-error: true
      working-directory: backend
      run: poetry run black --check --diff .

    - name: Check import sorting with isort
      continue-on-error: true
      working-directory: backend
      run: poetry run isort --check-only --diff .

    - name: Run Flake8 linting
      continue-on-error: true
      working-directory: backend
      run: |
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run MyPy type checking
      continue-on-error: true
      working-directory: backend
      run: poetry run mypy . || echo "Type checking completed with errors"

  frontend-quality:
    name: 🎨 Frontend Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run ESLint
      continue-on-error: true
      working-directory: frontend
      run: npm run lint

    - name: Run TypeScript check
      working-directory: frontend
      run: npm run typecheck

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        if-no-files-found: error

  docker-validation:
    name: 🐳 Docker Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment file
      run: |
        cat > .env << EOF
        NODE_ENV=development
        POSTGRES_DB=tokuteigino
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        REDIS_URL=redis://redis:6379
        DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tokuteigino
        OPENAI_API_KEY=test-key-mock
        SUPABASE_ANON_KEY=test-anon-key
        VITE_API_URL=http://localhost:8000
        VITE_SUPABASE_URL=http://localhost:54321
        EOF

    - name: Validate Docker Compose configuration
      run: docker-compose config

    - name: Build images with Docker Compose
      run: docker-compose build --parallel

    - name: Test image sizes
      run: |
        echo "🐳 Docker Image Sizes:"
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep tokuteigino || echo "No images built yet"

  summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [security, quality, frontend-quality, docker-validation]
    if: always()
    
    steps:
    - name: Check overall CI status
      run: |
        echo "🚀 CI Pipeline Results:"
        echo "  🔒 Security: ${{ needs.security.result }}"
        echo "  📏 Quality: ${{ needs.quality.result }}"
        echo "  🎨 Frontend: ${{ needs.frontend-quality.result }}"
        echo "  🐳 Docker: ${{ needs.docker-validation.result }}"
        
        # Fail if any critical job failed
        if [[ "${{ needs.frontend-quality.result }}" == "failure" || "${{ needs.docker-validation.result }}" == "failure" ]]; then
          echo "❌ Critical jobs failed"
          exit 1
        elif [[ "${{ needs.security.result }}" == "success" && "${{ needs.quality.result }}" == "success" && "${{ needs.frontend-quality.result }}" == "success" && "${{ needs.docker-validation.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
        else
          echo "⚠️ Some checks completed with warnings"
        fi