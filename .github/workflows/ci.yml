name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:

  security:
    name: üîí Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      continue-on-error: true
      run: |
        if [ -f "pyproject.toml" ]; then
          bandit -r . -f json -o bandit-report.json || bandit -r . --severity-level medium
        else
          bandit -r . --severity-level medium -x tests/
        fi

    - name: Run Safety check
      continue-on-error: true
      run: |
        if [ -f requirements.txt ]; then
          safety check --file requirements.txt
        else
          echo "No requirements.txt found, skipping safety check"
        fi

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
        if-no-files-found: ignore

  quality:
    name: üìè Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort

    - name: Check code formatting with Black
      continue-on-error: true
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      continue-on-error: true
      run: |
        isort --check-only --diff .

    - name: Run Flake8 linting
      continue-on-error: true
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run MyPy type checking
      continue-on-error: true
      run: |
        if [ -f "pyproject.toml" ] || [ -f "mypy.ini" ]; then
          mypy .
        else
          echo "No MyPy configuration found, skipping type checking"
        fi

  summary:
    name: üìä CI Summary
    runs-on: ubuntu-latest
    needs: [security, quality]
    if: always()
    
    steps:
    - name: CI Pipeline Summary
      run: |
        echo "üöÄ CI Pipeline Execution Complete"
        echo "üìã Job Results:"
        echo "  üîí Security: ${{ needs.security.result }}"
        echo "  üìè Quality: ${{ needs.quality.result }}"
        echo "‚ÑπÔ∏è  Tests are executed in separate test.yml workflow"
        
        if [[ "${{ needs.security.result }}" == "success" && "${{ needs.quality.result }}" == "success" ]]; then
          echo "‚úÖ All security and quality checks passed!"
        else
          echo "‚ö†Ô∏è  Some checks completed with warnings - review the logs above"
        fi