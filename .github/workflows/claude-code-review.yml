name: Advanced Claude Code Review with MCP Intelligence

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Smart path filtering for relevant changes
    paths:
      - "**/*.py"
      - "**/*.ts"
      - "**/*.tsx"
      - "**/*.js"
      - "**/*.jsx"
      - "backend/**/*"
      - "frontend/**/*"
      - "supabase/**/*"
      - "tests/**/*"
      - "requirements*.txt"
      - "pyproject.toml"
      - "package*.json"
      - "CLAUDE.md"
      - "docker-compose.yml"
      - "Makefile"

jobs:
  # Pre-analysis job to gather context using MCP tools
  mcp-context-analysis:
    name: MCP Context Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      tech-stack: ${{ steps.analyze.outputs.tech-stack }}
      complexity-score: ${{ steps.analyze.outputs.complexity-score }}
      similar-projects: ${{ steps.analyze.outputs.similar-projects }}
      review-focus: ${{ steps.analyze.outputs.review-focus }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Analyze codebase with Context7 & DeepWiki
        id: analyze
        run: |
          # Extract changed file types and technologies
          CHANGED_FILES=$(git diff --name-only HEAD~1)
          echo "Changed files: $CHANGED_FILES"
          
          # Detect technology stack
          TECH_STACK=""
          if echo "$CHANGED_FILES" | grep -q "\.py$"; then
            TECH_STACK="$TECH_STACK,Python"
          fi
          if echo "$CHANGED_FILES" | grep -q "\.tsx?\|\.jsx?$"; then
            TECH_STACK="$TECH_STACK,TypeScript/React"
          fi
          if echo "$CHANGED_FILES" | grep -q "backend/"; then
            TECH_STACK="$TECH_STACK,FastAPI"
          fi
          if echo "$CHANGED_FILES" | grep -q "frontend/"; then
            TECH_STACK="$TECH_STACK,React/Vite"
          fi
          if echo "$CHANGED_FILES" | grep -q "supabase\|vector"; then
            TECH_STACK="$TECH_STACK,Supabase/pgvector"
          fi
          if echo "$CHANGED_FILES" | grep -q "@mui\|material"; then
            TECH_STACK="$TECH_STACK,Material-UI"
          fi
          if echo "$CHANGED_FILES" | grep -q "zustand\|@tanstack"; then
            TECH_STACK="$TECH_STACK,StateManagement"
          fi
          if echo "$CHANGED_FILES" | grep -q "test_\|\.test\.\|\.spec\."; then
            TECH_STACK="$TECH_STACK,Testing"
          fi
          
          # Calculate complexity score based on file changes
          COMPLEXITY_SCORE=$(echo "$CHANGED_FILES" | wc -l)
          if [ $COMPLEXITY_SCORE -gt 10 ]; then
            COMPLEXITY_SCORE="high"
          elif [ $COMPLEXITY_SCORE -gt 5 ]; then
            COMPLEXITY_SCORE="medium"
          else
            COMPLEXITY_SCORE="low"
          fi
          
          # Set review focus based on changes
          REVIEW_FOCUS="general"
          if echo "$CHANGED_FILES" | grep -q "test_\|\.test\.\|\.spec\."; then
            REVIEW_FOCUS="testing"
          elif echo "$CHANGED_FILES" | grep -q "auth\|security\|protected"; then
            REVIEW_FOCUS="security"
          elif echo "$CHANGED_FILES" | grep -q "frontend/"; then
            REVIEW_FOCUS="frontend"
          elif echo "$CHANGED_FILES" | grep -q "backend/"; then
            REVIEW_FOCUS="backend"
          elif echo "$CHANGED_FILES" | grep -q "supabase\|migration\|vector\|embedding"; then
            REVIEW_FOCUS="database"
          elif echo "$CHANGED_FILES" | grep -q "stripe\|payment\|subscription"; then
            REVIEW_FOCUS="payment"
          fi
          
          echo "tech-stack=$TECH_STACK" >> $GITHUB_OUTPUT
          echo "complexity-score=$COMPLEXITY_SCORE" >> $GITHUB_OUTPUT
          echo "similar-projects=react,fastapi,supabase,mui,zustand" >> $GITHUB_OUTPUT
          echo "review-focus=$REVIEW_FOCUS" >> $GITHUB_OUTPUT

  claude-review:
    name: Advanced Claude Code Review
    needs: mcp-context-analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
      checks: write
      actions: read
      statuses: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          # Frontend dependencies
          if [ -f frontend/package.json ]; then
            cd frontend && npm ci && cd ..
          fi
          
          # Backend dependencies
          if [ -f backend/requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r backend/requirements.txt
          fi

      - name: Debug PR context
        run: |
          echo "PR Number: ${{ github.event.number }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event Action: ${{ github.event.action }}"
          
      - name: Advanced Claude Code Review with MCP Intelligence
        id: claude-review
        uses: anthropics/claude-code-action@main
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # MCP-Enhanced Review Prompt with Context7 & DeepWiki Integration
          direct_prompt: |
            You are conducting an advanced code review with access to Context7 and DeepWiki MCP servers for comprehensive analysis.
            
            ## üß† TOKUTEI Learning Code Review Context
            **Technology Stack**: ${{ needs.mcp-context-analysis.outputs.tech-stack }}
            **Complexity Score**: ${{ needs.mcp-context-analysis.outputs.complexity-score }}
            **Review Focus**: ${{ needs.mcp-context-analysis.outputs.review-focus }}
            **Similar Projects**: ${{ needs.mcp-context-analysis.outputs.similar-projects }}
            
            ## üéØ Project Context
            This is TOKUTEI Learning („Éà„ÇØ„ÉÜ„Ç§ „É©„Éº„Éã„É≥„Ç∞) - A web learning application for foreign workers preparing for Japan's Specified Skills (ÁâπÂÆöÊäÄËÉΩ) exam.
            
            **Frontend**: React 19 + Vite + TypeScript + Material-UI + Zustand + React Query
            **Backend**: FastAPI + Python + Supabase + OpenAI GPT-4o
            **Infrastructure**: Docker-first development, Vercel deployment, Stripe payments
            
            ## üîç Multi-Source Intelligence Review Process
            
            ### Phase 1: DeepWiki Repository Analysis
            **CRITICAL: Use DeepWiki MCP to analyze similar projects and patterns**
            1. **Research Best Practices**: Use `mcp__deepwiki__ask_question` to query best practices for:
               - React 19 + TypeScript best practices
               - FastAPI + Supabase architectures
               - Material-UI component patterns
               - Zustand state management patterns
               - PDF processing with PyPDF2
               - OpenAI GPT-4o integration patterns
               - Stripe subscription management
            
            2. **Compare Implementations**: Use `mcp__deepwiki__read_wiki_contents` for:
               - facebook/react (React 19 patterns)
               - microsoft/TypeScript (TypeScript best practices)
               - mui/material-ui (component patterns)
               - pmndrs/zustand (state management patterns)
               - supabase/supabase-js (database integration)
               - openai/openai-python (AI integration patterns)
            
            ### Phase 2: Context7 Technical Deep Dive
            **CRITICAL: Use Context7 MCP for technical analysis and learning**
            1. **Library Usage Analysis**: Query Context7 about:
               - "React 19 concurrent features best practices"
               - "TypeScript 5.8 strict mode patterns"
               - "Material-UI v7 theming and customization"
               - "Zustand persistence and middleware patterns"
               - "React Query v5 caching strategies"
               - "FastAPI dependency injection patterns"
               - "Supabase RLS (Row Level Security) best practices"
               - "OpenAI GPT-4o prompt engineering for education"
            
            2. **Error Pattern Analysis**: Research common issues:
               - "React hydration errors and solutions"
               - "TypeScript type inference limitations"
               - "Supabase real-time subscription memory leaks"
               - "PDF processing memory optimization"
               - "Stripe webhook security patterns"
               - "Multi-language UI implementation patterns"
            
            ### Phase 3: Comprehensive Code Review
            **Focus Areas Based on Context Analysis**:
            
            #### üöÄ Performance & Scalability
            - **React Component Optimization**: React 19 concurrent features usage
            - **Bundle Size Management**: Vite code splitting and lazy loading
            - **Database Query Efficiency**: Supabase RLS and index optimization
            - **API Response Time**: FastAPI async patterns (<500ms target)
            - **State Management**: Zustand store optimization
            - **Vector Search**: pgvector performance for RAG queries
            
            #### üîí Security & Reliability  
            - **Input Validation**: Compare security patterns with industry standards
            - **Error Handling**: Validate against research-backed error handling strategies
            - **Data Sanitization**: Ensure protection against injection attacks
            - **Authentication**: Follow security best practices from similar projects
            
            #### üß™ Testing & Quality Assurance
            - **Frontend Testing**: Vitest + React Testing Library patterns
            - **Backend Testing**: pytest + FastAPI test client
            - **E2E Testing**: Playwright for critical user flows
            - **Mock Strategies**: OpenAI API, Stripe, Supabase mocking
            - **TDD Compliance**: Test-first development verification
            - **Coverage Target**: 80%+ for critical paths
            
            #### üèóÔ∏è Architecture & Design Patterns
            - **Frontend Architecture**: React component composition patterns
            - **Backend Architecture**: FastAPI layered architecture
            - **State Management**: Zustand store organization
            - **Type Safety**: TypeScript strict mode compliance
            - **Docker-First**: Container-based development patterns
            - **API Design**: RESTful + GraphQL subscription patterns
            
            #### üéå TOKUTEI Learning-Specific Considerations
            - **Japanese Language Support**: Furigana rendering accuracy
            - **Learning Algorithm**: Spaced repetition implementation
            - **Question Generation**: GPT-4o prompt quality
            - **Subscription Plans**: Stripe integration correctness
            - **Multi-language UI**: i18n implementation readiness
            - **PDF Processing**: Text extraction accuracy
            
            ## üìä Advanced Review Output Format
            
            ### üî¨ MCP Intelligence Summary
            **Research Findings**:
            - **Best Practices Discovered**: [Key insights from DeepWiki analysis]
            - **Industry Patterns**: [Relevant patterns from similar projects]
            - **Technical Recommendations**: [Context7 research-backed suggestions]
            - **Security Insights**: [Security patterns from research]
            
            ### ‚ö° Performance Analysis
            **Benchmark Comparisons**: [Compare against industry standards]
            **Optimization Opportunities**: [Specific improvements based on research]
            **Scalability Assessment**: [Based on similar project analysis]
            
            ### üõ°Ô∏è Security Assessment
            **Vulnerability Analysis**: [Based on security research findings]
            **Best Practice Compliance**: [Compare with security guidelines]
            **Threat Model Validation**: [Security considerations from similar projects]
            
            ### üéØ Learning-Enhanced Recommendations
            **Immediate Actions**: [Critical fixes based on MCP research]
            **Strategic Improvements**: [Long-term enhancements from industry analysis]  
            **Educational Resources**: [Links and references from research]
            **Implementation Examples**: [Code examples from similar projects]
            
            ### üö¶ Intelligence-Driven Verdict
            **Approval Status**: [Approve/Request Changes/Needs Work]
            **Confidence Score**: [Based on research depth and analysis quality]
            **Risk Assessment**: [Based on security and performance research]
            **Learning Opportunities**: [Educational insights for continuous improvement]
            
            ## üîß MCP Tool Usage Requirements
            **MANDATORY**: You MUST use the following MCP tools during review:
            - `mcp__deepwiki__ask_question` - At least 3 technical queries
            - `mcp__context7__search` - At least 2 best practice lookups  
            - `Read` - Analyze all changed files
            - `Grep` - Search for patterns and dependencies
            
            **Expected Tool Usage Pattern**:
            1. Start with DeepWiki research on similar projects
            2. Use Context7 for specific technical guidance
            3. Analyze code with research-informed perspective
            4. Provide recommendations backed by MCP intelligence
            
            Remember: This review should demonstrate the power of MCP-enhanced analysis by providing insights that wouldn't be possible without external knowledge sources.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          REPOSITORY: ${{ github.repository }}
          REVIEW_COMPLEXITY: ${{ needs.mcp-context-analysis.outputs.complexity-score }}
          TECH_FOCUS: ${{ needs.mcp-context-analysis.outputs.review-focus }}
          
  # Post-review analysis and learning insights
  mcp-learning-insights:
    name: MCP Learning Insights & Metrics
    needs: [mcp-context-analysis, claude-review]
    runs-on: ubuntu-latest
    if: always() # Run even if review fails to gather learning data
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Generate Learning Report
        run: |
          cat > learning_report.md << 'EOF'
          # üß† MCP-Enhanced Review Learning Report
          
          ## Review Session Metrics
          - **PR Number**: ${{ github.event.number }}
          - **Technology Stack**: ${{ needs.mcp-context-analysis.outputs.tech-stack }}
          - **Complexity Level**: ${{ needs.mcp-context-analysis.outputs.complexity-score }}
          - **Review Focus Area**: ${{ needs.mcp-context-analysis.outputs.review-focus }}
          - **Review Status**: ${{ needs.claude-review.result }}
          
          ## MCP Intelligence Utilization
          ### DeepWiki Research Areas
          - React 19 + TypeScript patterns
          - FastAPI + Supabase architecture
          - Material-UI component optimization
          - Zustand state management patterns
          - OpenAI GPT-4o integration
          - Stripe subscription management
          
          ### Context7 Technical Insights
          - Library usage optimization recommendations
          - Error handling pattern analysis
          - Security vulnerability research
          - Performance optimization strategies
          
          ## Key Learning Outcomes
          - **Pattern Recognition**: Identified ${{ needs.mcp-context-analysis.outputs.complexity-score }} complexity patterns
          - **Best Practice Application**: Applied research-backed recommendations
          - **Security Enhancement**: Validated against industry security standards
          - **Performance Optimization**: Benchmarked against similar projects
          
          ## Continuous Improvement Suggestions
          - [ ] Implement research-recommended patterns
          - [ ] Apply security best practices from analysis
          - [ ] Optimize performance based on benchmark data
          - [ ] Follow architectural patterns from similar successful projects
          
          ## Resources for Further Learning
          Generated during MCP-enhanced review process with links to relevant documentation and examples.
          EOF
          
          echo "Generated learning report for PR #${{ github.event.number }}"

      - name: Archive Review Metrics
        run: |
          # Create metrics summary for continuous improvement
          cat > review_metrics.json << EOF
          {
            "pr_number": "${{ github.event.number }}",
            "tech_stack": "${{ needs.mcp-context-analysis.outputs.tech-stack }}",
            "complexity": "${{ needs.mcp-context-analysis.outputs.complexity-score }}",
            "focus_area": "${{ needs.mcp-context-analysis.outputs.review-focus }}",
            "review_status": "${{ needs.claude-review.result }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "mcp_tools_used": [
              "deepwiki__ask_question",
              "context7__search", 
              "deepwiki__read_wiki_contents"
            ],
            "learning_areas": [
              "best_practices",
              "security_patterns", 
              "performance_optimization",
              "architecture_analysis"
            ]
          }
          EOF
          
          echo "Review metrics archived for analysis and improvement"

  # Optional: Knowledge base update job
  knowledge-base-update:
    name: Update Knowledge Base
    needs: [mcp-context-analysis, claude-review, mcp-learning-insights]
    runs-on: ubuntu-latest
    if: needs.claude-review.result == 'success'
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Development Patterns Knowledge Base
        run: |
          # Create or update knowledge base with learned patterns
          mkdir -p .github/knowledge-base
          
          cat > .github/knowledge-base/review-patterns.md << 'EOF'
          # Development Patterns Knowledge Base
          
          Last Updated: $(date -u +%Y-%m-%d)
          
          ## Successful Review Patterns
          ### Technology Stack: ${{ needs.mcp-context-analysis.outputs.tech-stack }}
          - Complexity Level: ${{ needs.mcp-context-analysis.outputs.complexity-score }}
          - Focus Area: ${{ needs.mcp-context-analysis.outputs.review-focus }}
          - Review Result: Successful
          
          ### MCP Research Insights Applied
          - DeepWiki analysis provided industry comparison data
          - Context7 research informed technical recommendations  
          - Combined intelligence enhanced review quality
          
          ### Patterns to Replicate
          - Research-driven code review approach
          - Multi-source intelligence gathering
          - Learning-oriented feedback generation
          - Continuous knowledge base updates
          EOF
          
          echo "Knowledge base updated with successful patterns"

