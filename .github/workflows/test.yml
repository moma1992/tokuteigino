name: Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-type: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Free disk space
      uses: jlumbroso/free-disk-space@v1.3.1
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Set up Node.js (for frontend tests)
      if: matrix.test-type == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Set up Python (for backend tests)
      if: matrix.test-type == 'backend'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Poetry (for backend tests)
      if: matrix.test-type == 'backend'
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache backend dependencies
      if: matrix.test-type == 'backend'
      uses: actions/cache@v4
      with:
        path: backend/.venv
        key: ${{ runner.os }}-poetry-test-${{ hashFiles('backend/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-test-

    - name: Install backend dependencies
      if: matrix.test-type == 'backend'
      working-directory: backend
      run: poetry install --no-interaction

    - name: Install frontend dependencies
      if: matrix.test-type == 'frontend'
      working-directory: frontend
      run: npm ci

    - name: Run backend unit tests
      if: matrix.test-type == 'backend'
      working-directory: backend
      run: poetry run pytest -v --tb=short

    - name: Run frontend unit tests
      if: matrix.test-type == 'frontend'
      working-directory: frontend
      run: npm run test -- --run --passWithNoTests

    - name: Run backend tests with coverage
      if: matrix.test-type == 'backend'
      working-directory: backend
      run: poetry run pytest --cov=. --cov-report=html --cov-report=term --cov-report=xml

    - name: Run frontend tests with coverage
      if: matrix.test-type == 'frontend'
      working-directory: frontend
      run: npm run test:coverage -- --run --passWithNoTests

    - name: Upload backend coverage
      if: matrix.test-type == 'backend'
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: |
          backend/htmlcov/
          backend/coverage.xml
        if-no-files-found: ignore

    - name: Upload frontend coverage
      if: matrix.test-type == 'frontend'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
        if-no-files-found: ignore

  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Free disk space
      uses: jlumbroso/free-disk-space@v1.3.1
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: false
        swap-storage: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host

    - name: Create optimized environment file
      run: |
        cat > .env << EOF
        NODE_ENV=test
        POSTGRES_DB=tokuteigino_test
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        REDIS_URL=redis://redis:6379
        DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tokuteigino_test
        OPENAI_API_KEY=test-key-mock
        SUPABASE_ANON_KEY=test-anon-key
        VITE_API_URL=http://localhost:8000
        VITE_SUPABASE_URL=http://localhost:54321
        # Optimize for CI
        COMPOSE_PARALLEL_LIMIT=2
        POSTGRES_INITDB_ARGS=--auth-host=trust
        EOF

    - name: Create lightweight docker-compose for testing
      run: |
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          postgres:
            image: postgres:15-alpine
            environment:
              POSTGRES_DB: tokuteigino_test
              POSTGRES_USER: postgres
              POSTGRES_PASSWORD: postgres
              POSTGRES_INITDB_ARGS: --auth-host=trust
            tmpfs:
              - /var/lib/postgresql/data
            command: >
              postgres
              -c shared_buffers=128MB
              -c max_connections=20
              -c log_min_messages=warning
              -c log_min_error_statement=error
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U postgres"]
              interval: 5s
              timeout: 5s
              retries: 5

          redis:
            image: redis:7-alpine
            command: redis-server --save "" --appendonly no --maxmemory 100mb
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 5s
              timeout: 5s
              retries: 3

          backend:
            build:
              context: ./backend
              dockerfile: Dockerfile
            environment:
              - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tokuteigino_test
              - REDIS_URL=redis://redis:6379
              - OPENAI_API_KEY=test-key-mock
              - ENVIRONMENT=test
            depends_on:
              postgres:
                condition: service_healthy
              redis:
                condition: service_healthy
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
              interval: 10s
              timeout: 5s
              retries: 3
              start_period: 30s
        EOF

    - name: Build test containers
      run: |
        docker-compose -f docker-compose.test.yml build --parallel
        echo "Built images:"
        docker images

    - name: Start test services
      run: |
        docker-compose -f docker-compose.test.yml up -d postgres redis
        echo "Waiting for database..."
        docker-compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres
        
        echo "Starting backend..."
        docker-compose -f docker-compose.test.yml up -d backend

    - name: Wait for services to be ready
      run: |
        echo "Waiting for backend to be healthy..."
        timeout 120s bash -c 'until docker-compose -f docker-compose.test.yml exec -T backend curl -f http://localhost:8000/health; do sleep 2; done'

    - name: Run integration tests
      run: |
        echo "‚úÖ Backend health check passed"
        docker-compose -f docker-compose.test.yml exec -T backend curl -f http://localhost:8000/health
        
        echo "Running backend integration tests..."
        docker-compose -f docker-compose.test.yml exec -T backend poetry run pytest tests/ -v -k "not unit" || echo "No integration tests found"

    - name: Show container logs on failure
      if: failure()
      run: |
        echo "=== Service Status ==="
        docker-compose -f docker-compose.test.yml ps
        echo "=== Backend Logs ==="
        docker-compose -f docker-compose.test.yml logs backend
        echo "=== PostgreSQL Logs ==="
        docker-compose -f docker-compose.test.yml logs postgres
        echo "=== Redis Logs ==="
        docker-compose -f docker-compose.test.yml logs redis

    - name: Cleanup test environment
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v --remove-orphans
        docker system prune -f

  test-summary:
    name: üìä Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    
    steps:
    - name: Test Pipeline Summary
      run: |
        echo "üß™ Test Pipeline Results:"
        echo "  üß™ Unit Tests: ${{ needs.unit-tests.result }}"
        echo "  üîó Integration Tests: ${{ needs.integration-tests.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "‚úÖ All tests passed!"
          exit 0
        else
          echo "‚ùå Some tests failed"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          exit 1
        fi