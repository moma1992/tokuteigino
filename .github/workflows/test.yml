name: Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-type: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js (for frontend tests)
      if: matrix.test-type == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Set up Python (for backend tests)
      if: matrix.test-type == 'backend'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Poetry (for backend tests)
      if: matrix.test-type == 'backend'
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache backend dependencies
      if: matrix.test-type == 'backend'
      uses: actions/cache@v4
      with:
        path: backend/.venv
        key: ${{ runner.os }}-poetry-test-${{ hashFiles('backend/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-test-

    - name: Install backend dependencies
      if: matrix.test-type == 'backend'
      working-directory: backend
      run: poetry install --no-interaction

    - name: Install frontend dependencies
      if: matrix.test-type == 'frontend'
      working-directory: frontend
      run: npm ci

    - name: Run backend unit tests
      if: matrix.test-type == 'backend'
      working-directory: backend
      run: poetry run pytest -v --tb=short

    - name: Run frontend unit tests
      if: matrix.test-type == 'frontend'
      working-directory: frontend
      run: npm run test -- --run --passWithNoTests

    - name: Run backend tests with coverage
      if: matrix.test-type == 'backend'
      working-directory: backend
      run: poetry run pytest --cov=. --cov-report=html --cov-report=term --cov-report=xml

    - name: Run frontend tests with coverage
      if: matrix.test-type == 'frontend'
      working-directory: frontend
      run: npm run test:coverage -- --run --passWithNoTests

    - name: Upload backend coverage
      if: matrix.test-type == 'backend'
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: |
          backend/htmlcov/
          backend/coverage.xml
        if-no-files-found: ignore

    - name: Upload frontend coverage
      if: matrix.test-type == 'frontend'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
        if-no-files-found: ignore

  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: always()
    
    steps:
    - name: Test Pipeline Summary
      run: |
        echo "🧪 Test Pipeline Results:"
        echo "  🧪 Unit Tests: ${{ needs.unit-tests.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "✅ All tests passed!"
          exit 0
        else
          echo "❌ Unit tests failed"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          exit 1
        fi